{"ast":null,"code":"var _jsxFileName = \"/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const chatWindowRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?'\n      }, {\n        user: '',\n        bot: '',\n        options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order']\n      }]);\n    }\n  }, [chatOpen, messages.length]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleOptionClick = async option => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: option,\n      bot: ''\n    }]);\n    if (option === 'Product Information') {\n      const res = await fetch('http://localhost:4000/api/product-information', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionId\n        })\n      });\n      const data = await res.json();\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.response\n      }]);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: `Option \"${option}\" selected. Feature to be implemented.`\n      }]);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (question.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        user: question,\n        bot: ''\n      }]);\n      const res = await fetch('http://localhost:4000/api/product-information-followup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question,\n          sessionId\n        })\n      });\n      const data = await res.json();\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.response\n      }]);\n      setQuestion('');\n    } else {\n      alert('Please enter a question.');\n    }\n  };\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n  };\n  const handleClickOutside = e => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-bubble ${chatOpen ? 'open' : ''}`,\n      onClick: toggleChat,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bubble-icon\",\n        children: \"\\uD83D\\uDCAC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), chatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      ref: chatWindowRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Furniture Store Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: toggleChat,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message\",\n          children: [msg.user && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-message\",\n            children: msg.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 30\n          }, this), msg.bot && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bot-response\",\n            children: msg.bot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), msg.options && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: msg.options.map((option, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleOptionClick(option),\n              className: \"option-button\",\n              children: option\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"chat-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: question,\n          onChange: e => setQuestion(e.target.value),\n          placeholder: \"Type your message\",\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"chat-submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEndSession,\n        className: \"end-session-btn\",\n        children: \"Close Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OHXv0HuDTXlvkG76TO29L6e6Zd0=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n// import { Button, TextField, IconButton, Paper, Typography } from '@mui/material';\n// import SendIcon from '@mui/icons-material/Send';\n// import CloseIcon from '@mui/icons-material/Close';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       const userMessage = { user: question, bot: '' };\n//       setMessages((prevMessages) => [...prevMessages, userMessage]);\n//       setQuestion('');\n\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">💬</span>\n//       </div>\n//       {chatOpen && (\n//         <Paper elevation={3} className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <Typography variant=\"h6\">Furniture Store Assistant</Typography>\n//             <IconButton onClick={toggleChat} size=\"small\">\n//               <CloseIcon style={{ color: 'white' }} />\n//             </IconButton>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <Button key={i} variant=\"contained\" onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </Button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 multiline\n//                 rows={4}\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Submit Ticket\n//               </Button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 name=\"additionalPhoto\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           <Button onClick={handleEndSession} variant=\"contained\" color=\"secondary\" className=\"end-session-btn\">\n//             Close Session\n//           </Button>\n//         </Paper>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n// import { Button, TextField, IconButton, Paper, Typography } from '@mui/material';\n// import SendIcon from '@mui/icons-material/Send';\n// import CloseIcon from '@mui/icons-material/Close';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: 'Please provide the full title of the product so I can further assist you.' }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       const userMessage = { user: question, bot: '' };\n//       setMessages((prevMessages) => [...prevMessages, userMessage]);\n//       setQuestion('');\n\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">💬</span>\n//       </div>\n//       {chatOpen && (\n//         <Paper elevation={3} className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <Typography variant=\"h6\">Furniture Store Assistant</Typography>\n//             <IconButton onClick={toggleChat} size=\"small\">\n//               <CloseIcon style={{ color: 'white' }} />\n//             </IconButton>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <Button key={i} variant=\"contained\" onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </Button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 multiline\n//                 rows={4}\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Submit Ticket\n//               </Button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 name=\"additionalPhoto\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           <Button onClick={handleEndSession} variant=\"contained\" color=\"secondary\" className=\"end-session-btn\">\n//             Close Session\n//           </Button>\n//         </Paper>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","question","setQuestion","sessionId","setSessionId","chatOpen","setChatOpen","messages","setMessages","chatWindowRef","messagesEndRef","length","prevMessages","user","bot","options","scrollToBottom","handleOptionClick","option","res","fetch","method","headers","body","JSON","stringify","data","json","response","handleSubmit","e","preventDefault","trim","alert","toggleChat","handleEndSession","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","scrollIntoView","behavior","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","msg","index","i","onSubmit","type","value","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst App = () => {\n  const [question, setQuestion] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const chatWindowRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n        { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n      ]);\n    }\n  }, [chatOpen, messages.length]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleOptionClick = async (option) => {\n    setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n    if (option === 'Product Information') {\n      const res = await fetch('http://localhost:4000/api/product-information', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (question.trim()) {\n      setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n      const res = await fetch('http://localhost:4000/api/product-information-followup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ question, sessionId }),\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n      setQuestion('');\n    } else {\n      alert('Please enter a question.');\n    }\n  };\n\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n  };\n\n  const handleClickOutside = (e) => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n        <div className=\"bubble-icon\">💬</div>\n      </div>\n      {chatOpen && (\n        <div className=\"chat-window\" ref={chatWindowRef}>\n          <div className=\"chat-header\">\n            <span>Furniture Store Assistant</span>\n            <button className=\"close-btn\" onClick={toggleChat}>×</button>\n          </div>\n          <div className=\"chat-body\">\n            {messages.map((msg, index) => (\n              <div key={index} className=\"chat-message\">\n                {msg.user && <div className=\"user-message\">{msg.user}</div>}\n                {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n                {msg.options && (\n                  <div className=\"options\">\n                    {msg.options.map((option, i) => (\n                      <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n                        {option}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n          <form onSubmit={handleSubmit} className=\"chat-form\">\n            <input\n              type=\"text\"\n              value={question}\n              onChange={(e) => setQuestion(e.target.value)}\n              placeholder=\"Type your message\"\n              className=\"chat-input\"\n            />\n            <button type=\"submit\" className=\"chat-submit\">Send</button>\n          </form>\n          <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n\n\n\n\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n// import { Button, TextField, IconButton, Paper, Typography } from '@mui/material';\n// import SendIcon from '@mui/icons-material/Send';\n// import CloseIcon from '@mui/icons-material/Close';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       const userMessage = { user: question, bot: '' };\n//       setMessages((prevMessages) => [...prevMessages, userMessage]);\n//       setQuestion('');\n\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">💬</span>\n//       </div>\n//       {chatOpen && (\n//         <Paper elevation={3} className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <Typography variant=\"h6\">Furniture Store Assistant</Typography>\n//             <IconButton onClick={toggleChat} size=\"small\">\n//               <CloseIcon style={{ color: 'white' }} />\n//             </IconButton>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <Button key={i} variant=\"contained\" onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </Button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 multiline\n//                 rows={4}\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Submit Ticket\n//               </Button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 name=\"additionalPhoto\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           <Button onClick={handleEndSession} variant=\"contained\" color=\"secondary\" className=\"end-session-btn\">\n//             Close Session\n//           </Button>\n//         </Paper>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n// import { Button, TextField, IconButton, Paper, Typography } from '@mui/material';\n// import SendIcon from '@mui/icons-material/Send';\n// import CloseIcon from '@mui/icons-material/Close';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: 'Please provide the full title of the product so I can further assist you.' }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       const userMessage = { user: question, bot: '' };\n//       setMessages((prevMessages) => [...prevMessages, userMessage]);\n//       setQuestion('');\n\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">💬</span>\n//       </div>\n//       {chatOpen && (\n//         <Paper elevation={3} className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <Typography variant=\"h6\">Furniture Store Assistant</Typography>\n//             <IconButton onClick={toggleChat} size=\"small\">\n//               <CloseIcon style={{ color: 'white' }} />\n//             </IconButton>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <Button key={i} variant=\"contained\" onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </Button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 multiline\n//                 rows={4}\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Submit Ticket\n//               </Button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 name=\"additionalPhoto\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           <Button onClick={handleEndSession} variant=\"contained\" color=\"secondary\" className=\"end-session-btn\">\n//             Close Session\n//           </Button>\n//         </Paper>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}