{"ast":null,"code":"var _jsxFileName = \"/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js\";\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     console.log(\"Generated sessionId:\", sessionId); // Log sessionId when generated\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length, sessionId]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     console.log(\"Option clicked:\", option, \"with sessionId:\", sessionId); // Log sessionId when option is clicked\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       console.log(\"Submitting question:\", question, \"with sessionId:\", sessionId); // Log sessionId when submitting question\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     console.log(\"Chat toggled. Current state:\", chatOpen); // Log chat toggle state\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     console.log(\"Ending session. Previous sessionId:\", sessionId); // Log session end with previous sessionId\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//     setQuestion(''); // Clear the input box\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">ðŸ’¬</span>\n//       </div>\n//       {chatOpen && (\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <span>Furniture Store Assistant</span>\n//             <button className=\"close-btn\" onClick={toggleChat}>Ã—</button>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <textarea\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Submit Ticket</button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Send</button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Send</button>\n//             </form>\n//           )}\n//           <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nconst App = () => {\n  const [question, setQuestion] = useState('');\n  const [response, setResponse] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages([{\n        user: '',\n        bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?'\n      }, {\n        user: '',\n        bot: '',\n        options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order']\n      }]);\n    }\n  }, [chatOpen]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleOptionClick = async option => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: option,\n      bot: ''\n    }]);\n    if (option === 'Product Information') {\n      const res = await fetch('http://localhost:4000/api/product-information', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionId\n        })\n      });\n      const data = await res.json();\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.response\n      }]);\n    } else if (option === 'Submit a Ticket for Damaged Product') {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: 'Please provide your order number, a description of the issue, and a photo of the damage.'\n      }]);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: `Option \"${option}\" selected. Feature to be implemented.`\n      }]);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (question.trim()) {\n      const userMessage = {\n        user: question,\n        bot: ''\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setQuestion('');\n      const res = await fetch('http://localhost:4000/api/product-information-followup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question,\n          sessionId\n        })\n      });\n      const data = await res.json();\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.response\n      }]);\n    } else {\n      alert('Please enter a question.');\n    }\n  };\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n    setQuestion(''); // Clear the input box\n  };\n  const handleClickOutside = e => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chat-bubble ${chatOpen ? 'open' : ''}`,\n    onClick: toggleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"chat icon\",\n    className: \"bubble-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDCAC\")), chatOpen && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-window\",\n    ref: chatWindowRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }\n  }, \"Furniture Store Assistant\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"close-btn\",\n    onClick: toggleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }\n  }, \"\\xD7\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  }, messages.map((msg, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"chat-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 15\n    }\n  }, msg.user && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 30\n    }\n  }, msg.user), msg.bot && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bot-response\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 29\n    }\n  }, msg.bot), msg.options && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 19\n    }\n  }, msg.options.map((option, i) => /*#__PURE__*/React.createElement(\"button\", {\n    key: i,\n    onClick: () => handleOptionClick(option),\n    className: \"option-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 23\n    }\n  }, option))))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"chat-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: question,\n    onChange: e => setQuestion(e.target.value),\n    placeholder: \"Type your message\",\n    className: \"chat-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"chat-submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 13\n    }\n  }, \"Send\")), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleEndSession,\n    className: \"end-session-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 11\n    }\n  }, \"Close Session\")));\n};\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","v4","uuidv4","App","question","setQuestion","response","setResponse","sessionId","setSessionId","chatOpen","setChatOpen","messages","setMessages","messagesEndRef","length","user","bot","options","scrollToBottom","handleOptionClick","option","prevMessages","res","fetch","method","headers","body","JSON","stringify","data","json","handleSubmit","e","preventDefault","trim","userMessage","alert","toggleChat","handleEndSession","handleClickOutside","chatWindowRef","current","contains","target","document","addEventListener","removeEventListener","scrollIntoView","behavior","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","role","ref","map","msg","index","key","i","onSubmit","type","value","onChange","placeholder"],"sources":["/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     console.log(\"Generated sessionId:\", sessionId); // Log sessionId when generated\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length, sessionId]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     console.log(\"Option clicked:\", option, \"with sessionId:\", sessionId); // Log sessionId when option is clicked\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       console.log(\"Submitting question:\", question, \"with sessionId:\", sessionId); // Log sessionId when submitting question\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     console.log(\"Chat toggled. Current state:\", chatOpen); // Log chat toggle state\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     console.log(\"Ending session. Previous sessionId:\", sessionId); // Log session end with previous sessionId\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//     setQuestion(''); // Clear the input box\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">ðŸ’¬</span>\n//       </div>\n//       {chatOpen && (\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <span>Furniture Store Assistant</span>\n//             <button className=\"close-btn\" onClick={toggleChat}>Ã—</button>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <textarea\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Submit Ticket</button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Send</button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Send</button>\n//             </form>\n//           )}\n//           <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst App = () => {\n  const [question, setQuestion] = useState('');\n  const [response, setResponse] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages([\n        { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n        { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n      ]);\n    }\n  }, [chatOpen]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleOptionClick = async (option) => {\n    setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n    if (option === 'Product Information') {\n      const res = await fetch('http://localhost:4000/api/product-information', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n    } else if (option === 'Submit a Ticket for Damaged Product') {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n      ]);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (question.trim()) {\n      const userMessage = { user: question, bot: '' };\n      setMessages((prevMessages) => [...prevMessages, userMessage]);\n      setQuestion('');\n\n      const res = await fetch('http://localhost:4000/api/product-information-followup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ question, sessionId }),\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n    } else {\n      alert('Please enter a question.');\n    }\n  };\n\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n    setQuestion(''); // Clear the input box\n  };\n\n  const handleClickOutside = (e) => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n        <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">ðŸ’¬</span>\n      </div>\n      {chatOpen && (\n        <div className=\"chat-window\" ref={chatWindowRef}>\n          <div className=\"chat-header\">\n            <span>Furniture Store Assistant</span>\n            <button className=\"close-btn\" onClick={toggleChat}>Ã—</button>\n          </div>\n          <div className=\"chat-body\">\n            {messages.map((msg, index) => (\n              <div key={index} className=\"chat-message\">\n                {msg.user && <div className=\"user-message\">{msg.user}</div>}\n                {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n                {msg.options && (\n                  <div className=\"options\">\n                    {msg.options.map((option, i) => (\n                      <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n                        {option}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n          <form onSubmit={handleSubmit} className=\"chat-form\">\n            <input\n              type=\"text\"\n              value={question}\n              onChange={(e) => setQuestion(e.target.value)}\n              placeholder=\"Type your message\"\n              className=\"chat-input\"\n            />\n            <button type=\"submit\" className=\"chat-submit\">Send</button>\n          </form>\n          <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","ignoreList":[]},"metadata":{},"sourceType":"module"}