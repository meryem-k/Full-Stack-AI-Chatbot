{"ast":null,"code":"var _jsxFileName = \"/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ question, sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setQuestion('');\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <div className=\"bubble-icon\">ðŸ’¬</div>\n//       </div>\n//       {chatOpen && (\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <span>Furniture Store Assistant</span>\n//             <button className=\"close-btn\" onClick={toggleChat}>Ã—</button>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </button>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           <form onSubmit={handleSubmit} className=\"chat-form\">\n//             <input\n//               type=\"text\"\n//               value={question}\n//               onChange={(e) => setQuestion(e.target.value)}\n//               placeholder=\"Type your message\"\n//               className=\"chat-input\"\n//             />\n//             <button type=\"submit\" className=\"chat-submit\">Send</button>\n//           </form>\n//           <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [question, setQuestion] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [orderNumber, setOrderNumber] = useState('');\n  const [issueDescription, setIssueDescription] = useState('');\n  const [photo, setPhoto] = useState(null);\n  const chatWindowRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?'\n      }, {\n        user: '',\n        bot: '',\n        options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order']\n      }]);\n    }\n  }, [chatOpen, messages.length]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleOptionClick = async option => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: option,\n      bot: ''\n    }]);\n    if (option === 'Product Information') {\n      const res = await fetch('http://localhost:4000/api/product-information', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sessionId\n        })\n      });\n      const data = await res.json();\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.response\n      }]);\n    } else if (option === 'Submit a Ticket for Damaged Product') {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: 'Please provide your order number, a description of the issue, and a photo of the damage.'\n      }]);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: `Option \"${option}\" selected. Feature to be implemented.`\n      }]);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (question.trim()) {\n      setMessages(prevMessages => [...prevMessages, {\n        user: question,\n        bot: ''\n      }]);\n      let endpoint = 'http://localhost:4000/api/product-information-followup';\n      if (messages.some(msg => msg.bot.includes('Please provide your order number'))) {\n        endpoint = 'http://localhost:4000/api/submit-ticket';\n        const formData = new FormData();\n        formData.append('orderNumber', question);\n        formData.append('issueDescription', issueDescription);\n        formData.append('sessionId', sessionId);\n        if (photo) {\n          formData.append('photo', photo);\n        }\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData\n        });\n        const data = await res.json();\n        if (data.error) {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.error\n          }]);\n        } else {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.response\n          }]);\n        }\n        setOrderNumber('');\n        setIssueDescription('');\n        setPhoto(null);\n      } else if (messages.some(msg => msg.bot.includes('When did you receive the delivery?'))) {\n        endpoint = 'http://localhost:4000/api/submit-additional-info';\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        formData.append('receivedDate', question);\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData\n        });\n        const data = await res.json();\n        if (data.error) {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.error\n          }]);\n        } else {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.response\n          }]);\n        }\n      } else if (messages.some(msg => msg.bot.includes('Was the packaging damaged from the outside?'))) {\n        endpoint = 'http://localhost:4000/api/submit-additional-info';\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        formData.append('packagingDamage', question.toLowerCase());\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData\n        });\n        const data = await res.json();\n        if (data.error) {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.error\n          }]);\n        } else {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.response\n          }]);\n        }\n      } else if (messages.some(msg => msg.bot.includes('Do you have photos of the damaged packaging?'))) {\n        endpoint = 'http://localhost:4000/api/submit-additional-info';\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        if (question.toLowerCase() === 'yes' && photo) {\n          formData.append('additionalPhoto', photo);\n        }\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData\n        });\n        const data = await res.json();\n        if (data.error) {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.error\n          }]);\n        } else {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.response\n          }]);\n        }\n      } else if (messages.some(msg => msg.bot.includes('Do you have the original packaging and the box?'))) {\n        endpoint = 'http://localhost:4000/api/submit-additional-info';\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        formData.append('originalPackaging', question.toLowerCase());\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData\n        });\n        const data = await res.json();\n        if (data.error) {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.error\n          }]);\n        } else {\n          setMessages(prevMessages => [...prevMessages, {\n            user: '',\n            bot: data.response\n          }]);\n        }\n      } else {\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            question,\n            sessionId\n          })\n        });\n        const data = await res.json();\n        setMessages(prevMessages => [...prevMessages, {\n          user: '',\n          bot: data.response\n        }]);\n      }\n      setQuestion('');\n    } else {\n      alert('Please enter a question.');\n    }\n  };\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n  };\n  const handleClickOutside = e => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `chat-bubble ${chatOpen ? 'open' : ''}`,\n      onClick: toggleChat,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bubble-icon\",\n        children: \"\\uD83D\\uDCAC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), chatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      ref: chatWindowRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Furniture Store Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: toggleChat,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-body\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message\",\n          children: [msg.user && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-message\",\n            children: msg.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 30\n          }, this), msg.bot && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bot-response\",\n            children: msg.bot\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 29\n          }, this), msg.options && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"options\",\n            children: msg.options.map((option, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleOptionClick(option),\n              className: \"option-button\",\n              children: option\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"chat-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: question,\n          onChange: e => setQuestion(e.target.value),\n          placeholder: \"Type your message\",\n          className: \"chat-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"chat-submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEndSession,\n        className: \"end-session-btn\",\n        children: \"Close Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 346,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"K/7H4MaBvhpZpLKOvGu2KsvYezw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","v4","uuidv4","jsxDEV","_jsxDEV","App","_s","question","setQuestion","sessionId","setSessionId","chatOpen","setChatOpen","messages","setMessages","orderNumber","setOrderNumber","issueDescription","setIssueDescription","photo","setPhoto","chatWindowRef","messagesEndRef","length","prevMessages","user","bot","options","scrollToBottom","handleOptionClick","option","res","fetch","method","headers","body","JSON","stringify","data","json","response","handleSubmit","e","preventDefault","trim","endpoint","some","msg","includes","formData","FormData","append","error","toLowerCase","alert","toggleChat","handleEndSession","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","scrollIntoView","behavior","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","i","onSubmit","type","value","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ question, sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setQuestion('');\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <div className=\"bubble-icon\">ðŸ’¬</div>\n//       </div>\n//       {chatOpen && (\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <span>Furniture Store Assistant</span>\n//             <button className=\"close-btn\" onClick={toggleChat}>Ã—</button>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </button>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           <form onSubmit={handleSubmit} className=\"chat-form\">\n//             <input\n//               type=\"text\"\n//               value={question}\n//               onChange={(e) => setQuestion(e.target.value)}\n//               placeholder=\"Type your message\"\n//               className=\"chat-input\"\n//             />\n//             <button type=\"submit\" className=\"chat-submit\">Send</button>\n//           </form>\n//           <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst App = () => {\n  const [question, setQuestion] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [orderNumber, setOrderNumber] = useState('');\n  const [issueDescription, setIssueDescription] = useState('');\n  const [photo, setPhoto] = useState(null);\n  const chatWindowRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n        { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n      ]);\n    }\n  }, [chatOpen, messages.length]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleOptionClick = async (option) => {\n    setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n    if (option === 'Product Information') {\n      const res = await fetch('http://localhost:4000/api/product-information', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n    } else if (option === 'Submit a Ticket for Damaged Product') {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n      ]);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (question.trim()) {\n      setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n      let endpoint = 'http://localhost:4000/api/product-information-followup';\n\n      if (messages.some(msg => msg.bot.includes('Please provide your order number'))) {\n        endpoint = 'http://localhost:4000/api/submit-ticket';\n        const formData = new FormData();\n        formData.append('orderNumber', question);\n        formData.append('issueDescription', issueDescription);\n        formData.append('sessionId', sessionId);\n        if (photo) {\n          formData.append('photo', photo);\n        }\n\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData,\n        });\n\n        const data = await res.json();\n        if (data.error) {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n        } else {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n        }\n\n        setOrderNumber('');\n        setIssueDescription('');\n        setPhoto(null);\n      } else if (messages.some(msg => msg.bot.includes('When did you receive the delivery?'))) {\n        endpoint = 'http://localhost:4000/api/submit-additional-info';\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        formData.append('receivedDate', question);\n\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData,\n        });\n\n        const data = await res.json();\n        if (data.error) {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n        } else {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n        }\n      } else if (messages.some(msg => msg.bot.includes('Was the packaging damaged from the outside?'))) {\n        endpoint = 'http://localhost:4000/api/submit-additional-info';\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        formData.append('packagingDamage', question.toLowerCase());\n\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData,\n        });\n\n        const data = await res.json();\n        if (data.error) {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n        } else {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n        }\n      } else if (messages.some(msg => msg.bot.includes('Do you have photos of the damaged packaging?'))) {\n        endpoint = 'http://localhost:4000/api/submit-additional-info';\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        if (question.toLowerCase() === 'yes' && photo) {\n          formData.append('additionalPhoto', photo);\n        }\n\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData,\n        });\n\n        const data = await res.json();\n        if (data.error) {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n        } else {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n        }\n      } else if (messages.some(msg => msg.bot.includes('Do you have the original packaging and the box?'))) {\n        endpoint = 'http://localhost:4000/api/submit-additional-info';\n        const formData = new FormData();\n        formData.append('sessionId', sessionId);\n        formData.append('originalPackaging', question.toLowerCase());\n\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          body: formData,\n        });\n\n        const data = await res.json();\n        if (data.error) {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n        } else {\n          setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n        }\n      } else {\n        const res = await fetch(endpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ question, sessionId }),\n        });\n\n        const data = await res.json();\n        setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n      }\n      setQuestion('');\n    } else {\n      alert('Please enter a question.');\n    }\n  };\n\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n  };\n\n  const handleClickOutside = (e) => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n        <div className=\"bubble-icon\">ðŸ’¬</div>\n      </div>\n      {chatOpen && (\n        <div className=\"chat-window\" ref={chatWindowRef}>\n          <div className=\"chat-header\">\n            <span>Furniture Store Assistant</span>\n            <button className=\"close-btn\" onClick={toggleChat}>Ã—</button>\n          </div>\n          <div className=\"chat-body\">\n            {messages.map((msg, index) => (\n              <div key={index} className=\"chat-message\">\n                {msg.user && <div className=\"user-message\">{msg.user}</div>}\n                {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n                {msg.options && (\n                  <div className=\"options\">\n                    {msg.options.map((option, i) => (\n                      <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n                        {option}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n          <form onSubmit={handleSubmit} className=\"chat-form\">\n            <input\n              type=\"text\"\n              value={question}\n              onChange={(e) => setQuestion(e.target.value)}\n              placeholder=\"Type your message\"\n              className=\"chat-input\"\n            />\n            <button type=\"submit\" className=\"chat-submit\">Send</button>\n          </form>\n          <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAClB,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAACI,MAAM,CAAC,CAAC,CAAC;EACpD,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACmB,gBAAgB,EAAEC,mBA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}