{"ast":null,"code":"var _jsxFileName = \"/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js\";\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ question, sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setQuestion('');\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <div className=\"bubble-icon\">ðŸ’¬</div>\n//       </div>\n//       {chatOpen && (\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <span>Furniture Store Assistant</span>\n//             <button className=\"close-btn\" onClick={toggleChat}>Ã—</button>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </button>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           <form onSubmit={handleSubmit} className=\"chat-form\">\n//             <input\n//               type=\"text\"\n//               value={question}\n//               onChange={(e) => setQuestion(e.target.value)}\n//               placeholder=\"Type your message\"\n//               className=\"chat-input\"\n//             />\n//             <button type=\"submit\" className=\"chat-submit\">Send</button>\n//           </form>\n//           <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n// import { Button, TextField, IconButton, Paper, Typography } from '@mui/material';\n// import SendIcon from '@mui/icons-material/Send';\n// import CloseIcon from '@mui/icons-material/Close';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       const userMessage = { user: question, bot: '' };\n//       setMessages((prevMessages) => [...prevMessages, userMessage]);\n//       setQuestion('');\n\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">ðŸ’¬</span>\n//       </div>\n//       {chatOpen && (\n//         <Paper elevation={3} className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <Typography variant=\"h6\">Furniture Store Assistant</Typography>\n//             <IconButton onClick={toggleChat} size=\"small\">\n//               <CloseIcon style={{ color: 'white' }} />\n//             </IconButton>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <Button key={i} variant=\"contained\" onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </Button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 multiline\n//                 rows={4}\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Submit Ticket\n//               </Button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 name=\"additionalPhoto\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           <Button onClick={handleEndSession} variant=\"contained\" color=\"secondary\" className=\"end-session-btn\">\n//             Close Session\n//           </Button>\n//         </Paper>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Button, TextField, IconButton, Paper, Typography } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport CloseIcon from '@mui/icons-material/Close';\nconst App = () => {\n  const [question, setQuestion] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [orderNumber, setOrderNumber] = useState('');\n  const [issueDescription, setIssueDescription] = useState('');\n  const [photo, setPhoto] = useState(null);\n  const [photoPreview, setPhotoPreview] = useState(null);\n  const [showTicketForm, setShowTicketForm] = useState(false);\n  const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n  const chatWindowRef = useRef(null);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?'\n      }, {\n        user: '',\n        bot: '',\n        options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order']\n      }]);\n    }\n  }, [chatOpen, messages.length]);\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const handleOptionClick = async option => {\n    setMessages(prevMessages => [...prevMessages, {\n      user: option,\n      bot: ''\n    }]);\n    if (option === 'Product Information') {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: 'Please provide the full title of the product so I can further assist you.'\n      }]);\n    } else if (option === 'Submit a Ticket for Damaged Product') {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: 'Please provide your order number, a description of the issue, and a photo of the damage.'\n      }]);\n      setShowTicketForm(true);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: `Option \"${option}\" selected. Feature to be implemented.`\n      }]);\n    }\n  };\n  const handleTicketSubmission = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('orderNumber', orderNumber);\n    formData.append('issueDescription', issueDescription);\n    formData.append('sessionId', sessionId);\n    if (photo) {\n      formData.append('photo', photo);\n    }\n    const res = await fetch('http://localhost:4000/api/submit-ticket', {\n      method: 'POST',\n      body: formData\n    });\n    const data = await res.json();\n    if (data.error) {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.error\n      }]);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.response\n      }]);\n      setShowTicketForm(false);\n      setShowAdditionalForm(true);\n    }\n    setOrderNumber('');\n    setIssueDescription('');\n    setPhoto(null);\n    setPhotoPreview(null);\n  };\n  const handleAdditionalInfoSubmission = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('sessionId', sessionId);\n    formData.append('answer', question);\n    if (photo) {\n      formData.append('additionalPhoto', photo);\n    }\n    const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n      method: 'POST',\n      body: formData\n    });\n    const data = await res.json();\n    if (data.error) {\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.error\n      }]);\n    } else {\n      setMessages(prevMessages => [...prevMessages, {\n        user: question,\n        bot: data.response\n      }]);\n      setShowAdditionalForm(true);\n      setQuestion('');\n      setPhoto(null);\n      setPhotoPreview(null);\n    }\n  };\n  const handlePhotoChange = e => {\n    const file = e.target.files[0];\n    setPhoto(file);\n    setPhotoPreview(URL.createObjectURL(file));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (question.trim()) {\n      const userMessage = {\n        user: question,\n        bot: ''\n      };\n      setMessages(prevMessages => [...prevMessages, userMessage]);\n      setQuestion('');\n      const formData = new FormData();\n      formData.append('question', question);\n      formData.append('sessionId', sessionId);\n      if (photo) {\n        formData.append('additionalPhoto', photo);\n      }\n      const res = await fetch('http://localhost:4000/api/product-information-followup', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await res.json();\n      setMessages(prevMessages => [...prevMessages, {\n        user: '',\n        bot: data.response\n      }]);\n      setPhoto(null);\n      setPhotoPreview(null);\n    } else {\n      alert('Please enter a question.');\n    }\n  };\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n  };\n  const handleClickOutside = e => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `chat-bubble ${chatOpen ? 'open' : ''}`,\n    onClick: toggleChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"chat icon\",\n    className: \"bubble-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDCAC\")), chatOpen && /*#__PURE__*/React.createElement(Paper, {\n    elevation: 3,\n    className: \"chat-window\",\n    ref: chatWindowRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 13\n    }\n  }, \"Furniture Store Assistant\"), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: toggleChat,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 11\n    }\n  }, messages.map((msg, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: \"chat-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 15\n    }\n  }, msg.user && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 30\n    }\n  }, msg.user), msg.bot && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bot-response\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 29\n    }\n  }, msg.bot), msg.options && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"options\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 19\n    }\n  }, msg.options.map((option, i) => /*#__PURE__*/React.createElement(Button, {\n    key: i,\n    variant: \"contained\",\n    onClick: () => handleOptionClick(option),\n    className: \"option-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 23\n    }\n  }, option))), msg.photo && /*#__PURE__*/React.createElement(\"img\", {\n    src: msg.photo,\n    alt: \"Uploaded\",\n    className: \"chat-photo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 31\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 666,\n      columnNumber: 13\n    }\n  })), showTicketForm && /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleTicketSubmission,\n    className: \"chat-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    fullWidth: true,\n    value: orderNumber,\n    onChange: e => setOrderNumber(e.target.value),\n    placeholder: \"Order Number\",\n    className: \"chat-input\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    fullWidth: true,\n    multiline: true,\n    rows: 4,\n    value: issueDescription,\n    onChange: e => setIssueDescription(e.target.value),\n    placeholder: \"Issue Description\",\n    className: \"chat-input\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handlePhotoChange,\n    className: \"chat-input\",\n    accept: \"image/*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 15\n    }\n  }), photoPreview && /*#__PURE__*/React.createElement(\"img\", {\n    src: photoPreview,\n    alt: \"Preview\",\n    className: \"photo-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    className: \"chat-submit\",\n    endIcon: /*#__PURE__*/React.createElement(SendIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 106\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 697,\n      columnNumber: 15\n    }\n  }, \"Submit Ticket\")), showAdditionalForm && /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleAdditionalInfoSubmission,\n    className: \"chat-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    fullWidth: true,\n    value: question,\n    onChange: e => setQuestion(e.target.value),\n    placeholder: \"Type your answer here\",\n    className: \"chat-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"additionalPhoto\",\n    onChange: handlePhotoChange,\n    className: \"chat-input\",\n    accept: \"image/*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 15\n    }\n  }), photoPreview && /*#__PURE__*/React.createElement(\"img\", {\n    src: photoPreview,\n    alt: \"Preview\",\n    className: \"photo-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 719,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    className: \"chat-submit\",\n    endIcon: /*#__PURE__*/React.createElement(SendIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 106\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 15\n    }\n  }, \"Send\")), !showTicketForm && !showAdditionalForm && /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"chat-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    fullWidth: true,\n    value: question,\n    onChange: e => setQuestion(e.target.value),\n    placeholder: \"Type your message\",\n    className: \"chat-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 727,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: handlePhotoChange,\n    className: \"chat-input\",\n    accept: \"image/*\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 15\n    }\n  }), photoPreview && /*#__PURE__*/React.createElement(\"img\", {\n    src: photoPreview,\n    alt: \"Preview\",\n    className: \"photo-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    className: \"chat-submit\",\n    endIcon: /*#__PURE__*/React.createElement(SendIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 106\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 15\n    }\n  }, \"Send\")), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleEndSession,\n    variant: \"contained\",\n    color: \"secondary\",\n    className: \"end-session-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 747,\n      columnNumber: 11\n    }\n  }, \"Close Session\")));\n};\nexport default App;","map":{"version":3,"names":["React","useState","useRef","useEffect","v4","uuidv4","Button","TextField","IconButton","Paper","Typography","SendIcon","CloseIcon","App","question","setQuestion","sessionId","setSessionId","chatOpen","setChatOpen","messages","setMessages","orderNumber","setOrderNumber","issueDescription","setIssueDescription","photo","setPhoto","photoPreview","setPhotoPreview","showTicketForm","setShowTicketForm","showAdditionalForm","setShowAdditionalForm","chatWindowRef","messagesEndRef","length","prevMessages","user","bot","options","scrollToBottom","handleOptionClick","option","handleTicketSubmission","e","preventDefault","formData","FormData","append","res","fetch","method","body","data","json","error","response","handleAdditionalInfoSubmission","handlePhotoChange","file","target","files","URL","createObjectURL","handleSubmit","trim","userMessage","alert","toggleChat","handleEndSession","handleClickOutside","current","contains","document","addEventListener","removeEventListener","scrollIntoView","behavior","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","role","elevation","ref","variant","size","style","color","map","msg","index","key","i","src","alt","onSubmit","fullWidth","value","onChange","placeholder","required","multiline","rows","type","accept","endIcon","name"],"sources":["/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js"],"sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ question, sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setQuestion('');\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <div className=\"bubble-icon\">ðŸ’¬</div>\n//       </div>\n//       {chatOpen && (\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <span>Furniture Store Assistant</span>\n//             <button className=\"close-btn\" onClick={toggleChat}>Ã—</button>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </button>\n//                     ))}\n//                   </div>\n//                 )}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           <form onSubmit={handleSubmit} className=\"chat-form\">\n//             <input\n//               type=\"text\"\n//               value={question}\n//               onChange={(e) => setQuestion(e.target.value)}\n//               placeholder=\"Type your message\"\n//               className=\"chat-input\"\n//             />\n//             <button type=\"submit\" className=\"chat-submit\">Send</button>\n//           </form>\n//           <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n// import { Button, TextField, IconButton, Paper, Typography } from '@mui/material';\n// import SendIcon from '@mui/icons-material/Send';\n// import CloseIcon from '@mui/icons-material/Close';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       const userMessage = { user: question, bot: '' };\n//       setMessages((prevMessages) => [...prevMessages, userMessage]);\n//       setQuestion('');\n\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">ðŸ’¬</span>\n//       </div>\n//       {chatOpen && (\n//         <Paper elevation={3} className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <Typography variant=\"h6\">Furniture Store Assistant</Typography>\n//             <IconButton onClick={toggleChat} size=\"small\">\n//               <CloseIcon style={{ color: 'white' }} />\n//             </IconButton>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <Button key={i} variant=\"contained\" onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </Button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 multiline\n//                 rows={4}\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Submit Ticket\n//               </Button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 name=\"additionalPhoto\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <TextField\n//                 variant=\"outlined\"\n//                 fullWidth\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n//                 Send\n//               </Button>\n//             </form>\n//           )}\n//           <Button onClick={handleEndSession} variant=\"contained\" color=\"secondary\" className=\"end-session-btn\">\n//             Close Session\n//           </Button>\n//         </Paper>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Button, TextField, IconButton, Paper, Typography } from '@mui/material';\nimport SendIcon from '@mui/icons-material/Send';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst App = () => {\n  const [question, setQuestion] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [orderNumber, setOrderNumber] = useState('');\n  const [issueDescription, setIssueDescription] = useState('');\n  const [photo, setPhoto] = useState(null);\n  const [photoPreview, setPhotoPreview] = useState(null);\n  const [showTicketForm, setShowTicketForm] = useState(false);\n  const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n  const chatWindowRef = useRef(null);\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n        { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n      ]);\n    }\n  }, [chatOpen, messages.length]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleOptionClick = async (option) => {\n    setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n    if (option === 'Product Information') {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: 'Please provide the full title of the product so I can further assist you.' }]);\n    } else if (option === 'Submit a Ticket for Damaged Product') {\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n      ]);\n      setShowTicketForm(true);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n    }\n  };\n\n  const handleTicketSubmission = async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append('orderNumber', orderNumber);\n    formData.append('issueDescription', issueDescription);\n    formData.append('sessionId', sessionId);\n    if (photo) {\n      formData.append('photo', photo);\n    }\n\n    const res = await fetch('http://localhost:4000/api/submit-ticket', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const data = await res.json();\n    if (data.error) {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n      setShowTicketForm(false);\n      setShowAdditionalForm(true);\n    }\n\n    setOrderNumber('');\n    setIssueDescription('');\n    setPhoto(null);\n    setPhotoPreview(null);\n  };\n\n  const handleAdditionalInfoSubmission = async (e) => {\n    e.preventDefault();\n\n    const formData = new FormData();\n    formData.append('sessionId', sessionId);\n    formData.append('answer', question);\n    if (photo) {\n      formData.append('additionalPhoto', photo);\n    }\n\n    const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const data = await res.json();\n    if (data.error) {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n      setShowAdditionalForm(true);\n      setQuestion('');\n      setPhoto(null);\n      setPhotoPreview(null);\n    }\n  };\n\n  const handlePhotoChange = (e) => {\n    const file = e.target.files[0];\n    setPhoto(file);\n    setPhotoPreview(URL.createObjectURL(file));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (question.trim()) {\n      const userMessage = { user: question, bot: '' };\n      setMessages((prevMessages) => [...prevMessages, userMessage]);\n      setQuestion('');\n\n      const formData = new FormData();\n      formData.append('question', question);\n      formData.append('sessionId', sessionId);\n      if (photo) {\n        formData.append('additionalPhoto', photo);\n      }\n\n      const res = await fetch('http://localhost:4000/api/product-information-followup', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n      setPhoto(null);\n      setPhotoPreview(null);\n    } else {\n      alert('Please enter a question.');\n    }\n  };\n\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n  };\n\n  const handleClickOutside = (e) => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n        <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">ðŸ’¬</span>\n      </div>\n      {chatOpen && (\n        <Paper elevation={3} className=\"chat-window\" ref={chatWindowRef}>\n          <div className=\"chat-header\">\n            <Typography variant=\"h6\">Furniture Store Assistant</Typography>\n            <IconButton onClick={toggleChat} size=\"small\">\n              <CloseIcon style={{ color: 'white' }} />\n            </IconButton>\n          </div>\n          <div className=\"chat-body\">\n            {messages.map((msg, index) => (\n              <div key={index} className=\"chat-message\">\n                {msg.user && <div className=\"user-message\">{msg.user}</div>}\n                {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n                {msg.options && (\n                  <div className=\"options\">\n                    {msg.options.map((option, i) => (\n                      <Button key={i} variant=\"contained\" onClick={() => handleOptionClick(option)} className=\"option-button\">\n                        {option}\n                      </Button>\n                    ))}\n                  </div>\n                )}\n                {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n          {showTicketForm && (\n            <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                value={orderNumber}\n                onChange={(e) => setOrderNumber(e.target.value)}\n                placeholder=\"Order Number\"\n                className=\"chat-input\"\n                required\n              />\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                multiline\n                rows={4}\n                value={issueDescription}\n                onChange={(e) => setIssueDescription(e.target.value)}\n                placeholder=\"Issue Description\"\n                className=\"chat-input\"\n                required\n              />\n              <input\n                type=\"file\"\n                onChange={handlePhotoChange}\n                className=\"chat-input\"\n                accept=\"image/*\"\n              />\n              {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n                Submit Ticket\n              </Button>\n            </form>\n          )}\n          {showAdditionalForm && (\n            <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                value={question}\n                onChange={(e) => setQuestion(e.target.value)}\n                placeholder=\"Type your answer here\"\n                className=\"chat-input\"\n              />\n              <input\n                type=\"file\"\n                name=\"additionalPhoto\"\n                onChange={handlePhotoChange}\n                className=\"chat-input\"\n                accept=\"image/*\"\n              />\n              {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n                Send\n              </Button>\n            </form>\n          )}\n          {!showTicketForm && !showAdditionalForm && (\n            <form onSubmit={handleSubmit} className=\"chat-form\">\n              <TextField\n                variant=\"outlined\"\n                fullWidth\n                value={question}\n                onChange={(e) => setQuestion(e.target.value)}\n                placeholder=\"Type your message\"\n                className=\"chat-input\"\n              />\n              <input\n                type=\"file\"\n                onChange={handlePhotoChange}\n                className=\"chat-input\"\n                accept=\"image/*\"\n              />\n              {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" className=\"chat-submit\" endIcon={<SendIcon />}>\n                Send\n              </Button>\n            </form>\n          )}\n          <Button onClick={handleEndSession} variant=\"contained\" color=\"secondary\" className=\"end-session-btn\">\n            Close Session\n          </Button>\n        </Paper>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAgBA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAClB,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AACnC,SAASC,MAAM,EAAEC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAEC,UAAU,QAAQ,eAAe;AAChF,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,SAAS,MAAM,2BAA2B;AAEjD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM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","ignoreList":[]},"metadata":{},"sourceType":"module"}