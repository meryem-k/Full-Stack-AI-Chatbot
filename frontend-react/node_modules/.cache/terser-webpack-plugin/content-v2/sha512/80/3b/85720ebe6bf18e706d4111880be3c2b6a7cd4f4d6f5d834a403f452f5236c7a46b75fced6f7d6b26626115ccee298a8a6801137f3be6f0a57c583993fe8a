{"map":"{\"version\":3,\"sources\":[\"/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/App.js\",\"/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/reportWebVitals.js\",\"/Users/smkar/Documents/VsCode/ai-chatbot/frontend-react/src/index.js\"],\"names\":[\"App\",\"question\",\"setQuestion\",\"useState\",\"sessionId\",\"setSessionId\",\"uuidv4\",\"chatOpen\",\"setChatOpen\",\"messages\",\"setMessages\",\"orderNumber\",\"setOrderNumber\",\"issueDescription\",\"setIssueDescription\",\"photo\",\"setPhoto\",\"photoPreview\",\"setPhotoPreview\",\"showTicketForm\",\"setShowTicketForm\",\"showAdditionalForm\",\"setShowAdditionalForm\",\"isSubmitting\",\"setIsSubmitting\",\"messagesEndRef\",\"useRef\",\"chatWindowRef\",\"useEffect\",\"length\",\"user\",\"bot\",\"options\",\"scrollToBottom\",\"handlePhotoChange\",\"e\",\"file\",\"target\",\"files\",\"URL\",\"createObjectURL\",\"toggleChat\",\"handleClickOutside\",\"current\",\"contains\",\"document\",\"addEventListener\",\"removeEventListener\",\"scrollIntoView\",\"behavior\",\"React\",\"createElement\",\"className\",\"concat\",\"onClick\",\"role\",\"aria-label\",\"ref\",\"map\",\"msg\",\"index\",\"key\",\"option\",\"i\",\"async\",\"prevMessages\",\"res\",\"fetch\",\"method\",\"headers\",\"Content-Type\",\"body\",\"JSON\",\"stringify\",\"data\",\"json\",\"response\",\"handleOptionClick\",\"onSubmit\",\"preventDefault\",\"formData\",\"FormData\",\"append\",\"error\",\"type\",\"value\",\"onChange\",\"placeholder\",\"required\",\"accept\",\"src\",\"alt\",\"disabled\",\"name\",\"trim\",\"userMessage\",\"alert\",\"handleEndSession\",\"reportWebVitals\",\"onPerfEntry\",\"Function\",\"__webpack_require__\",\"then\",\"bind\",\"_ref\",\"getCLS\",\"getFID\",\"getFCP\",\"getLCP\",\"getTTFB\",\"ReactDOM\",\"createRoot\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"// import React, { useState, useRef, useEffect } from 'react';\\n// import './App.css';\\n// import { v4 as uuidv4 } from 'uuid';\\n\\n// const App = () => {\\n//   const [question, setQuestion] = useState('');\\n//   const [sessionId, setSessionId] = useState(uuidv4());\\n//   const [chatOpen, setChatOpen] = useState(false);\\n//   const [messages, setMessages] = useState([]);\\n//   const [orderNumber, setOrderNumber] = useState('');\\n//   const [issueDescription, setIssueDescription] = useState('');\\n//   const [photo, setPhoto] = useState(null);\\n//   const [photoPreview, setPhotoPreview] = useState(null);\\n//   const [showTicketForm, setShowTicketForm] = useState(false);\\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\\n//   const chatWindowRef = useRef(null);\\n//   const messagesEndRef = useRef(null);\\n\\n//   useEffect(() => {\\n//     console.log(\\\"Generated sessionId:\\\", sessionId); // Log sessionId when generated\\n//     if (chatOpen && messages.length === 0) {\\n//       setMessages((prevMessages) => [\\n//         ...prevMessages,\\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\\n//       ]);\\n//     }\\n//   }, [chatOpen, messages.length, sessionId]);\\n\\n//   useEffect(() => {\\n//     scrollToBottom();\\n//   }, [messages]);\\n\\n//   const handleOptionClick = async (option) => {\\n//     console.log(\\\"Option clicked:\\\", option, \\\"with sessionId:\\\", sessionId); // Log sessionId when option is clicked\\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\\n//     if (option === 'Product Information') {\\n//       const res = await fetch('http://localhost:4000/api/product-information', {\\n//         method: 'POST',\\n//         headers: {\\n//           'Content-Type': 'application/json',\\n//         },\\n//         body: JSON.stringify({ sessionId }),\\n//       });\\n\\n//       const data = await res.json();\\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\\n//       setMessages((prevMessages) => [\\n//         ...prevMessages,\\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\\n//       ]);\\n//       setShowTicketForm(true);\\n//     } else {\\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \\\"${option}\\\" selected. Feature to be implemented.` }]);\\n//     }\\n//   };\\n\\n//   const handleTicketSubmission = async (e) => {\\n//     e.preventDefault();\\n\\n//     const formData = new FormData();\\n//     formData.append('orderNumber', orderNumber);\\n//     formData.append('issueDescription', issueDescription);\\n//     formData.append('sessionId', sessionId);\\n//     if (photo) {\\n//       formData.append('photo', photo);\\n//     }\\n\\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\\n//       method: 'POST',\\n//       body: formData,\\n//     });\\n\\n//     const data = await res.json();\\n//     if (data.error) {\\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\\n//     } else {\\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n//       setShowTicketForm(false);\\n//       setShowAdditionalForm(true);\\n//     }\\n\\n//     setOrderNumber('');\\n//     setIssueDescription('');\\n//     setPhoto(null);\\n//     setPhotoPreview(null);\\n//   };\\n\\n//   const handleAdditionalInfoSubmission = async (e) => {\\n//     e.preventDefault();\\n\\n//     const formData = new FormData();\\n//     formData.append('sessionId', sessionId);\\n//     formData.append('answer', question);\\n//     if (photo) {\\n//       formData.append('additionalPhoto', photo);\\n//     }\\n\\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\\n//       method: 'POST',\\n//       body: formData,\\n//     });\\n\\n//     const data = await res.json();\\n//     if (data.error) {\\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\\n//     } else {\\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\\n//       setShowAdditionalForm(true);\\n//       setQuestion('');\\n//       setPhoto(null);\\n//       setPhotoPreview(null);\\n//     }\\n//   };\\n\\n//   const handlePhotoChange = (e) => {\\n//     const file = e.target.files[0];\\n//     setPhoto(file);\\n//     setPhotoPreview(URL.createObjectURL(file));\\n//   };\\n\\n//   const handleSubmit = async (e) => {\\n//     e.preventDefault();\\n\\n//     if (question.trim()) {\\n//       console.log(\\\"Submitting question:\\\", question, \\\"with sessionId:\\\", sessionId); // Log sessionId when submitting question\\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\\n//       const formData = new FormData();\\n//       formData.append('question', question);\\n//       formData.append('sessionId', sessionId);\\n//       if (photo) {\\n//         formData.append('additionalPhoto', photo);\\n//       }\\n\\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\\n//         method: 'POST',\\n//         body: formData,\\n//       });\\n\\n//       const data = await res.json();\\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n//       setQuestion('');\\n//       setPhoto(null);\\n//       setPhotoPreview(null);\\n//     } else {\\n//       alert('Please enter a question.');\\n//     }\\n//   };\\n\\n//   const toggleChat = () => {\\n//     console.log(\\\"Chat toggled. Current state:\\\", chatOpen); // Log chat toggle state\\n//     setChatOpen(!chatOpen);\\n//   };\\n\\n//   const handleEndSession = () => {\\n//     console.log(\\\"Ending session. Previous sessionId:\\\", sessionId); // Log session end with previous sessionId\\n//     setSessionId(uuidv4());\\n//     setMessages([]);\\n//     setChatOpen(false);\\n//     setQuestion(''); // Clear the input box\\n//   };\\n\\n//   const handleClickOutside = (e) => {\\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\\n//       setChatOpen(false);\\n//     }\\n//   };\\n\\n//   useEffect(() => {\\n//     document.addEventListener('mousedown', handleClickOutside);\\n//     return () => {\\n//       document.removeEventListener('mousedown', handleClickOutside);\\n//     };\\n//   }, []);\\n\\n//   const scrollToBottom = () => {\\n//     if (messagesEndRef.current) {\\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\\n//     }\\n//   };\\n\\n//   return (\\n//     <div className=\\\"App\\\">\\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\\n//         <span role=\\\"img\\\" aria-label=\\\"chat icon\\\" className=\\\"bubble-icon\\\">💬</span>\\n//       </div>\\n//       {chatOpen && (\\n//         <div className=\\\"chat-window\\\" ref={chatWindowRef}>\\n//           <div className=\\\"chat-header\\\">\\n//             <span>Furniture Store Assistant</span>\\n//             <button className=\\\"close-btn\\\" onClick={toggleChat}>×</button>\\n//           </div>\\n//           <div className=\\\"chat-body\\\">\\n//             {messages.map((msg, index) => (\\n//               <div key={index} className=\\\"chat-message\\\">\\n//                 {msg.user && <div className=\\\"user-message\\\">{msg.user}</div>}\\n//                 {msg.bot && <div className=\\\"bot-response\\\">{msg.bot}</div>}\\n//                 {msg.options && (\\n//                   <div className=\\\"options\\\">\\n//                     {msg.options.map((option, i) => (\\n//                       <button key={i} onClick={() => handleOptionClick(option)} className=\\\"option-button\\\">\\n//                         {option}\\n//                       </button>\\n//                     ))}\\n//                   </div>\\n//                 )}\\n//                 {msg.photo && <img src={msg.photo} alt=\\\"Uploaded\\\" className=\\\"chat-photo\\\" />}\\n//               </div>\\n//             ))}\\n//             <div ref={messagesEndRef} />\\n//           </div>\\n//           {showTicketForm && (\\n//             <form onSubmit={handleTicketSubmission} className=\\\"chat-form\\\">\\n//               <input\\n//                 type=\\\"text\\\"\\n//                 value={orderNumber}\\n//                 onChange={(e) => setOrderNumber(e.target.value)}\\n//                 placeholder=\\\"Order Number\\\"\\n//                 className=\\\"chat-input\\\"\\n//                 required\\n//               />\\n//               <textarea\\n//                 value={issueDescription}\\n//                 onChange={(e) => setIssueDescription(e.target.value)}\\n//                 placeholder=\\\"Issue Description\\\"\\n//                 className=\\\"chat-input\\\"\\n//                 required\\n//               />\\n//               <input\\n//                 type=\\\"file\\\"\\n//                 onChange={handlePhotoChange}\\n//                 className=\\\"chat-input\\\"\\n//                 accept=\\\"image/*\\\"\\n//               />\\n//               {photoPreview && <img src={photoPreview} alt=\\\"Preview\\\" className=\\\"photo-preview\\\" />}\\n//               <button type=\\\"submit\\\" className=\\\"chat-submit\\\">Submit Ticket</button>\\n//             </form>\\n//           )}\\n//           {showAdditionalForm && (\\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\\\"chat-form\\\">\\n//               <input\\n//                 type=\\\"text\\\"\\n//                 value={question}\\n//                 onChange={(e) => setQuestion(e.target.value)}\\n//                 placeholder=\\\"Type your answer here\\\"\\n//                 className=\\\"chat-input\\\"\\n//               />\\n//               <input\\n//                 type=\\\"file\\\"\\n//                 onChange={handlePhotoChange}\\n//                 className=\\\"chat-input\\\"\\n//                 accept=\\\"image/*\\\"\\n//               />\\n//               {photoPreview && <img src={photoPreview} alt=\\\"Preview\\\" className=\\\"photo-preview\\\" />}\\n//               <button type=\\\"submit\\\" className=\\\"chat-submit\\\">Send</button>\\n//             </form>\\n//           )}\\n//           {!showTicketForm && !showAdditionalForm && (\\n//             <form onSubmit={handleSubmit} className=\\\"chat-form\\\">\\n//               <input\\n//                 type=\\\"text\\\"\\n//                 value={question}\\n//                 onChange={(e) => setQuestion(e.target.value)}\\n//                 placeholder=\\\"Type your message\\\"\\n//                 className=\\\"chat-input\\\"\\n//               />\\n//               <input\\n//                 type=\\\"file\\\"\\n//                 onChange={handlePhotoChange}\\n//                 className=\\\"chat-input\\\"\\n//                 accept=\\\"image/*\\\"\\n//               />\\n//               {photoPreview && <img src={photoPreview} alt=\\\"Preview\\\" className=\\\"photo-preview\\\" />}\\n//               <button type=\\\"submit\\\" className=\\\"chat-submit\\\">Send</button>\\n//             </form>\\n//           )}\\n//           <button onClick={handleEndSession} className=\\\"end-session-btn\\\">Close Session</button>\\n//         </div>\\n//       )}\\n//     </div>\\n//   );\\n// };\\n\\n// export default App;\\n\\n\\n\\n// import React, { useState, useEffect, useRef } from 'react';\\n// import './App.css';\\n// import { v4 as uuidv4 } from 'uuid';\\n\\n  \\n//   const App = () => {\\n//     const [question, setQuestion] = useState('');\\n//     const [response, setResponse] = useState('');\\n//     const [sessionId, setSessionId] = useState(uuidv4());\\n//     const [chatOpen, setChatOpen] = useState(false);\\n//     const [messages, setMessages] = useState([]);\\n//     const messagesEndRef = useRef(null);\\n//     const chatWindowRef = useRef(null);\\n  \\n//     useEffect(() => {\\n//       if (chatOpen && messages.length === 0) {\\n//         setMessages([\\n//           { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\\n//           { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\\n//         ]);\\n//       }\\n//     }, [chatOpen]);\\n  \\n//     useEffect(() => {\\n//       scrollToBottom();\\n//     }, [messages]);\\n  \\n//     const handleOptionClick = async (option) => {\\n//       setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\\n//       if (option === 'Product Information') {\\n//         const res = await fetch('http://localhost:4000/api/product-information', {\\n//           method: 'POST',\\n//           headers: {\\n//             'Content-Type': 'application/json',\\n//           },\\n//           body: JSON.stringify({ sessionId }),\\n//         });\\n  \\n//         const data = await res.json();\\n//         setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n//       } else if (option === 'Submit a Ticket for Damaged Product') {\\n//         setMessages((prevMessages) => [\\n//           ...prevMessages,\\n//           { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\\n//         ]);\\n//       } else {\\n//         setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \\\"${option}\\\" selected. Feature to be implemented.` }]);\\n//       }\\n//     };\\n  \\n//     const handleSubmit = async (e) => {\\n//       e.preventDefault();\\n  \\n//       if (question.trim()) {\\n//         const userMessage = { user: question, bot: '' };\\n//         setMessages((prevMessages) => [...prevMessages, userMessage]);\\n//         setQuestion('');\\n  \\n//         const res = await fetch('http://localhost:4000/api/product-information-followup', {\\n//           method: 'POST',\\n//           headers: {\\n//             'Content-Type': 'application/json',\\n//           },\\n//           body: JSON.stringify({ question, sessionId }),\\n//         });\\n  \\n//         const data = await res.json();\\n//         setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n//       } else {\\n//         alert('Please enter a question.');\\n//       }\\n//     };\\n  \\n//     const toggleChat = () => {\\n//       setChatOpen(!chatOpen);\\n//     };\\n  \\n//     const handleEndSession = () => {\\n//       setSessionId(uuidv4());\\n//       setMessages([]);\\n//       setChatOpen(false);\\n//       setQuestion(''); // Clear the input box\\n//     };\\n  \\n//     const handleClickOutside = (e) => {\\n//       if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\\n//         setChatOpen(false);\\n//       }\\n//     };\\n  \\n//     useEffect(() => {\\n//       document.addEventListener('mousedown', handleClickOutside);\\n//       return () => {\\n//         document.removeEventListener('mousedown', handleClickOutside);\\n//       };\\n//     }, []);\\n  \\n//     const scrollToBottom = () => {\\n//       if (messagesEndRef.current) {\\n//         messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\\n//       }\\n//     };\\n  \\n//     return (\\n//       <div className=\\\"App\\\">\\n//         <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\\n//           <span role=\\\"img\\\" aria-label=\\\"chat icon\\\" className=\\\"bubble-icon\\\">💬</span>\\n//         </div>\\n//         {chatOpen && (\\n//           <div className=\\\"chat-window\\\" ref={chatWindowRef}>\\n//             <div className=\\\"chat-header\\\">\\n//               <span>Furniture Store Assistant</span>\\n//               <button className=\\\"close-btn\\\" onClick={toggleChat}>×</button>\\n//             </div>\\n//             <div className=\\\"chat-body\\\">\\n//               {messages.map((msg, index) => (\\n//                 <div key={index} className=\\\"chat-message\\\">\\n//                   {msg.user && <div className=\\\"user-message\\\">{msg.user}</div>}\\n//                   {msg.bot && <div className=\\\"bot-response\\\">{msg.bot}</div>}\\n//                   {msg.options && (\\n//                     <div className=\\\"options\\\">\\n//                       {msg.options.map((option, i) => (\\n//                         <button key={i} onClick={() => handleOptionClick(option)} className=\\\"option-button\\\">\\n//                           {option}\\n//                         </button>\\n//                       ))}\\n//                     </div>\\n//                   )}\\n//                 </div>\\n//               ))}\\n//               <div ref={messagesEndRef} />\\n//             </div>\\n//             <form onSubmit={handleSubmit} className=\\\"chat-form\\\">\\n//               <input\\n//                 type=\\\"text\\\"\\n//                 value={question}\\n//                 onChange={(e) => setQuestion(e.target.value)}\\n//                 placeholder=\\\"Type your message\\\"\\n//                 className=\\\"chat-input\\\"\\n//               />\\n//               <button type=\\\"submit\\\" className=\\\"chat-submit\\\">Send</button>\\n//             </form>\\n//             <button onClick={handleEndSession} className=\\\"end-session-btn\\\">Close Session</button>\\n//           </div>\\n//         )}\\n//       </div>\\n//     );\\n//   };\\n  \\n//   export default App;  \\n\\n\\n\\n\\n\\nimport React, { useState, useEffect, useRef } from 'react';\\nimport './App.css';\\nimport { v4 as uuidv4 } from 'uuid';\\n\\nconst App = () => {\\n  const [question, setQuestion] = useState('');\\n  const [sessionId, setSessionId] = useState(uuidv4());\\n  const [chatOpen, setChatOpen] = useState(false);\\n  const [messages, setMessages] = useState([]);\\n  const [orderNumber, setOrderNumber] = useState('');\\n  const [issueDescription, setIssueDescription] = useState('');\\n  const [photo, setPhoto] = useState(null);\\n  const [photoPreview, setPhotoPreview] = useState(null);\\n  const [showTicketForm, setShowTicketForm] = useState(false);\\n  const [showAdditionalForm, setShowAdditionalForm] = useState(false);\\n  const [isSubmitting, setIsSubmitting] = useState(false);\\n  const messagesEndRef = useRef(null);\\n  const chatWindowRef = useRef(null);\\n\\n  useEffect(() => {\\n    if (chatOpen && messages.length === 0) {\\n      setMessages([\\n        { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\\n        { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\\n      ]);\\n    }\\n  }, [chatOpen, messages.length]);\\n\\n  useEffect(() => {\\n    scrollToBottom();\\n  }, [messages]);\\n\\n  const handleOptionClick = async (option) => {\\n    setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\\n    if (option === 'Product Information') {\\n      const res = await fetch('http://localhost:4000/api/product-information', {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ sessionId }),\\n      });\\n\\n      const data = await res.json();\\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n    } else if (option === 'Submit a Ticket for Damaged Product') {\\n      const res = await fetch('http://localhost:4000/api/initial-ticket-request', {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ sessionId }),\\n      });\\n\\n      const data = await res.json();\\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n      setShowTicketForm(true);\\n    } else {\\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \\\"${option}\\\" selected. Feature to be implemented.` }]);\\n    }\\n  };\\n\\n  const handleTicketSubmission = async (e) => {\\n    e.preventDefault();\\n    setIsSubmitting(true);\\n\\n    const formData = new FormData();\\n    formData.append('orderNumber', orderNumber);\\n    formData.append('issueDescription', issueDescription);\\n    formData.append('sessionId', sessionId);\\n    if (photo) {\\n      formData.append('photo', photo);\\n    }\\n\\n    const res = await fetch('http://localhost:4000/api/submit-ticket', {\\n      method: 'POST',\\n      body: formData,\\n    });\\n\\n    const data = await res.json();\\n    if (data.error) {\\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\\n    } else {\\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n      setShowTicketForm(false);\\n      setShowAdditionalForm(true);\\n    }\\n\\n    setOrderNumber('');\\n    setIssueDescription('');\\n    setPhoto(null);\\n    setPhotoPreview(null);\\n    setIsSubmitting(false);\\n  };\\n\\n  const handleAdditionalInfoSubmission = async (e) => {\\n    e.preventDefault();\\n    setIsSubmitting(true);\\n\\n    const formData = new FormData();\\n    formData.append('sessionId', sessionId);\\n    formData.append('answer', question);\\n    if (photo) {\\n      formData.append('additionalPhoto', photo);\\n    }\\n\\n    const res = await fetch('http://localhost:4000/api/submit-additional-info', {\\n      method: 'POST',\\n      body: formData,\\n    });\\n\\n    const data = await res.json();\\n    if (data.error) {\\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\\n    } else {\\n      setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\\n      setShowAdditionalForm(true);\\n      setQuestion('');\\n      setPhoto(null);\\n      setPhotoPreview(null);\\n    }\\n    setIsSubmitting(false);\\n  };\\n\\n  const handlePhotoChange = (e) => {\\n    const file = e.target.files[0];\\n    setPhoto(file);\\n    setPhotoPreview(URL.createObjectURL(file));\\n  };\\n\\n  const handleSubmit = async (e) => {\\n    e.preventDefault();\\n    setIsSubmitting(true);\\n\\n    if (question.trim()) {\\n      const userMessage = { user: question, bot: '' };\\n      setMessages((prevMessages) => [...prevMessages, userMessage]);\\n      setQuestion('');\\n\\n      const res = await fetch('http://localhost:4000/api/product-information-followup', {\\n        method: 'POST',\\n        headers: {\\n          'Content-Type': 'application/json',\\n        },\\n        body: JSON.stringify({ question, sessionId }), // Ensure sessionId is passed\\n      });\\n\\n      const data = await res.json();\\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\\n    } else {\\n      alert('Please enter a question.');\\n    }\\n    setIsSubmitting(false);\\n  };\\n\\n  const toggleChat = () => {\\n    setChatOpen(!chatOpen);\\n  };\\n\\n  const handleEndSession = () => {\\n    setSessionId(uuidv4());\\n    setMessages([]);\\n    setChatOpen(false);\\n    setQuestion(''); // Clear the input box\\n  };\\n\\n  const handleClickOutside = (e) => {\\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\\n      setChatOpen(false);\\n    }\\n  };\\n\\n  useEffect(() => {\\n    document.addEventListener('mousedown', handleClickOutside);\\n    return () => {\\n      document.removeEventListener('mousedown', handleClickOutside);\\n    };\\n  }, []);\\n\\n  const scrollToBottom = () => {\\n    if (messagesEndRef.current) {\\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\\n        <span role=\\\"img\\\" aria-label=\\\"chat icon\\\" className=\\\"bubble-icon\\\">💬</span>\\n      </div>\\n      {chatOpen && (\\n        <div className=\\\"chat-window\\\" ref={chatWindowRef}>\\n          <div className=\\\"chat-header\\\">\\n            <span>Furniture Store Assistant</span>\\n            <button className=\\\"close-btn\\\" onClick={toggleChat}>×</button>\\n          </div>\\n          <div className=\\\"chat-body\\\">\\n            {messages.map((msg, index) => (\\n              <div key={index} className=\\\"chat-message\\\">\\n                {msg.user && <div className=\\\"user-message\\\">{msg.user}</div>}\\n                {msg.bot && <div className=\\\"bot-response\\\">{msg.bot}</div>}\\n                {msg.options && (\\n                  <div className=\\\"options\\\">\\n                    {msg.options.map((option, i) => (\\n                      <button key={i} onClick={() => handleOptionClick(option)} className=\\\"option-button\\\">\\n                        {option}\\n                      </button>\\n                    ))}\\n                  </div>\\n                )}\\n              </div>\\n            ))}\\n            <div ref={messagesEndRef} />\\n          </div>\\n          {showTicketForm && (\\n            <form onSubmit={handleTicketSubmission} className=\\\"chat-form\\\">\\n              <input\\n                type=\\\"text\\\"\\n                value={orderNumber}\\n                onChange={(e) => setOrderNumber(e.target.value)}\\n                placeholder=\\\"Order Number\\\"\\n                className=\\\"chat-input\\\"\\n                required\\n              />\\n              <textarea\\n                value={issueDescription}\\n                onChange={(e) => setIssueDescription(e.target.value)}\\n                placeholder=\\\"Issue Description\\\"\\n                className=\\\"chat-input\\\"\\n                required\\n              />\\n              <input\\n                type=\\\"file\\\"\\n                onChange={handlePhotoChange}\\n                className=\\\"chat-input\\\"\\n                accept=\\\"image/*\\\"\\n              />\\n              {photoPreview && <img src={photoPreview} alt=\\\"Preview\\\" className=\\\"photo-preview\\\" />}\\n              <button type=\\\"submit\\\" className=\\\"chat-submit\\\" disabled={isSubmitting}>Submit Ticket</button>\\n            </form>\\n          )}\\n          {showAdditionalForm && (\\n            <form onSubmit={handleAdditionalInfoSubmission} className=\\\"chat-form\\\">\\n              <input\\n                type=\\\"text\\\"\\n                value={question}\\n                onChange={(e) => setQuestion(e.target.value)}\\n                placeholder=\\\"Type your answer here\\\"\\n                className=\\\"chat-input\\\"\\n              />\\n              <input\\n                type=\\\"file\\\"\\n                name=\\\"additionalPhoto\\\"\\n                onChange={handlePhotoChange}\\n                className=\\\"chat-input\\\"\\n                accept=\\\"image/*\\\"\\n              />\\n              {photoPreview && <img src={photoPreview} alt=\\\"Preview\\\" className=\\\"photo-preview\\\" />}\\n              <button type=\\\"submit\\\" className=\\\"chat-submit\\\" disabled={isSubmitting}>Send</button>\\n            </form>\\n          )}\\n          {!showTicketForm && !showAdditionalForm && (\\n            <form onSubmit={handleSubmit} className=\\\"chat-form\\\">\\n              <input\\n                type=\\\"text\\\"\\n                value={question}\\n                onChange={(e) => setQuestion(e.target.value)}\\n                placeholder=\\\"Type your message\\\"\\n                className=\\\"chat-input\\\"\\n              />\\n              <button type=\\\"submit\\\" className=\\\"chat-submit\\\" disabled={isSubmitting}>Send</button>\\n            </form>\\n          )}\\n          <button onClick={handleEndSession} className=\\\"end-session-btn\\\">Close Session</button>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\",\"const reportWebVitals = onPerfEntry => {\\n  if (onPerfEntry && onPerfEntry instanceof Function) {\\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\\n      getCLS(onPerfEntry);\\n      getFID(onPerfEntry);\\n      getFCP(onPerfEntry);\\n      getLCP(onPerfEntry);\\n      getTTFB(onPerfEntry);\\n    });\\n  }\\n};\\n\\nexport default reportWebVitals;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n// If you want to start measuring performance in your app, pass a function\\n// to log results (for example: reportWebVitals(console.log))\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,t,a){},16:function(e,t,a){},19:function(e,t,a){\"use strict\";a.r(t);var n=a(0),s=a.n(n),o=a(5),c=a.n(o),r=(a(15),a(16),a(1));var l=()=>{const[e,t]=Object(n.useState)(\"\"),[a,o]=Object(n.useState)(Object(r.v4)()),[c,l]=Object(n.useState)(!1),[i,u]=Object(n.useState)([]),[m,p]=Object(n.useState)(\"\"),[d,b]=Object(n.useState)(\"\"),[h,f]=Object(n.useState)(null),[E,v]=Object(n.useState)(null),[y,g]=Object(n.useState)(!1),[w,N]=Object(n.useState)(!1),[S,O]=Object(n.useState)(!1),j=Object(n.useRef)(null),P=Object(n.useRef)(null);Object(n.useEffect)(()=>{c&&0===i.length&&u([{user:\"\",bot:\"Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?\"},{user:\"\",bot:\"\",options:[\"Product Information\",\"Submit a Ticket for Damaged Product\",\"Delivery Update\",\"Place an Order\"]}])},[c,i.length]),Object(n.useEffect)(()=>{I()},[i]);const C=e=>{const t=e.target.files[0];f(t),v(URL.createObjectURL(t))},T=()=>{l(!c)},k=e=>{P.current&&!P.current.contains(e.target)&&l(!1)};Object(n.useEffect)(()=>(document.addEventListener(\"mousedown\",k),()=>{document.removeEventListener(\"mousedown\",k)}),[]);const I=()=>{j.current&&j.current.scrollIntoView({behavior:\"smooth\"})};return s.a.createElement(\"div\",{className:\"App\"},s.a.createElement(\"div\",{className:\"chat-bubble \".concat(c?\"open\":\"\"),onClick:T},s.a.createElement(\"span\",{role:\"img\",\"aria-label\":\"chat icon\",className:\"bubble-icon\"},\"\\ud83d\\udcac\")),c&&s.a.createElement(\"div\",{className:\"chat-window\",ref:P},s.a.createElement(\"div\",{className:\"chat-header\"},s.a.createElement(\"span\",null,\"Furniture Store Assistant\"),s.a.createElement(\"button\",{className:\"close-btn\",onClick:T},\"\\xd7\")),s.a.createElement(\"div\",{className:\"chat-body\"},i.map((e,t)=>s.a.createElement(\"div\",{key:t,className:\"chat-message\"},e.user&&s.a.createElement(\"div\",{className:\"user-message\"},e.user),e.bot&&s.a.createElement(\"div\",{className:\"bot-response\"},e.bot),e.options&&s.a.createElement(\"div\",{className:\"options\"},e.options.map((e,t)=>s.a.createElement(\"button\",{key:t,onClick:()=>(async e=>{if(u(t=>[...t,{user:e,bot:\"\"}]),\"Product Information\"===e){const e=await fetch(\"http://localhost:4000/api/product-information\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({sessionId:a})}),t=await e.json();u(e=>[...e,{user:\"\",bot:t.response}])}else if(\"Submit a Ticket for Damaged Product\"===e){const e=await fetch(\"http://localhost:4000/api/initial-ticket-request\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({sessionId:a})}),t=await e.json();u(e=>[...e,{user:\"\",bot:t.response}]),g(!0)}else u(t=>[...t,{user:\"\",bot:'Option \"'.concat(e,'\" selected. Feature to be implemented.')}])})(e),className:\"option-button\"},e))))),s.a.createElement(\"div\",{ref:j})),y&&s.a.createElement(\"form\",{onSubmit:async e=>{e.preventDefault(),O(!0);const t=new FormData;t.append(\"orderNumber\",m),t.append(\"issueDescription\",d),t.append(\"sessionId\",a),h&&t.append(\"photo\",h);const n=await fetch(\"http://localhost:4000/api/submit-ticket\",{method:\"POST\",body:t}),s=await n.json();s.error?u(e=>[...e,{user:\"\",bot:s.error}]):(u(e=>[...e,{user:\"\",bot:s.response}]),g(!1),N(!0)),p(\"\"),b(\"\"),f(null),v(null),O(!1)},className:\"chat-form\"},s.a.createElement(\"input\",{type:\"text\",value:m,onChange:e=>p(e.target.value),placeholder:\"Order Number\",className:\"chat-input\",required:!0}),s.a.createElement(\"textarea\",{value:d,onChange:e=>b(e.target.value),placeholder:\"Issue Description\",className:\"chat-input\",required:!0}),s.a.createElement(\"input\",{type:\"file\",onChange:C,className:\"chat-input\",accept:\"image/*\"}),E&&s.a.createElement(\"img\",{src:E,alt:\"Preview\",className:\"photo-preview\"}),s.a.createElement(\"button\",{type:\"submit\",className:\"chat-submit\",disabled:S},\"Submit Ticket\")),w&&s.a.createElement(\"form\",{onSubmit:async n=>{n.preventDefault(),O(!0);const s=new FormData;s.append(\"sessionId\",a),s.append(\"answer\",e),h&&s.append(\"additionalPhoto\",h);const o=await fetch(\"http://localhost:4000/api/submit-additional-info\",{method:\"POST\",body:s}),c=await o.json();c.error?u(e=>[...e,{user:\"\",bot:c.error}]):(u(t=>[...t,{user:e,bot:c.response}]),N(!0),t(\"\"),f(null),v(null)),O(!1)},className:\"chat-form\"},s.a.createElement(\"input\",{type:\"text\",value:e,onChange:e=>t(e.target.value),placeholder:\"Type your answer here\",className:\"chat-input\"}),s.a.createElement(\"input\",{type:\"file\",name:\"additionalPhoto\",onChange:C,className:\"chat-input\",accept:\"image/*\"}),E&&s.a.createElement(\"img\",{src:E,alt:\"Preview\",className:\"photo-preview\"}),s.a.createElement(\"button\",{type:\"submit\",className:\"chat-submit\",disabled:S},\"Send\")),!y&&!w&&s.a.createElement(\"form\",{onSubmit:async n=>{if(n.preventDefault(),O(!0),e.trim()){const n={user:e,bot:\"\"};u(e=>[...e,n]),t(\"\");const s=await fetch(\"http://localhost:4000/api/product-information-followup\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({question:e,sessionId:a})}),o=await s.json();u(e=>[...e,{user:\"\",bot:o.response}])}else alert(\"Please enter a question.\");O(!1)},className:\"chat-form\"},s.a.createElement(\"input\",{type:\"text\",value:e,onChange:e=>t(e.target.value),placeholder:\"Type your message\",className:\"chat-input\"}),s.a.createElement(\"button\",{type:\"submit\",className:\"chat-submit\",disabled:S},\"Send\")),s.a.createElement(\"button\",{onClick:()=>{o(Object(r.v4)()),u([]),l(!1),t(\"\")},className:\"end-session-btn\"},\"Close Session\")))};var i=e=>{e&&e instanceof Function&&a.e(3).then(a.bind(null,20)).then(t=>{let{getCLS:a,getFID:n,getFCP:s,getLCP:o,getTTFB:c}=t;a(e),n(e),s(e),o(e),c(e)})};c.a.createRoot(document.getElementById(\"root\")).render(s.a.createElement(s.a.StrictMode,null,s.a.createElement(l,null))),i()},6:function(e,t,a){e.exports=a(19)}},[[6,1,2]]]);","extractedComments":[]}