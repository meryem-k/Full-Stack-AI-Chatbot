{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","question","setQuestion","useState","sessionId","setSessionId","uuidv4","chatOpen","setChatOpen","messages","setMessages","orderNumber","setOrderNumber","issueDescription","setIssueDescription","photo","setPhoto","photoPreview","setPhotoPreview","showTicketForm","setShowTicketForm","showAdditionalForm","setShowAdditionalForm","isSubmitting","setIsSubmitting","messagesEndRef","useRef","chatWindowRef","useEffect","length","user","bot","options","scrollToBottom","handlePhotoChange","e","file","target","files","URL","createObjectURL","toggleChat","handleClickOutside","current","contains","document","addEventListener","removeEventListener","scrollIntoView","behavior","React","createElement","className","concat","onClick","role","aria-label","ref","map","msg","index","key","option","i","async","prevMessages","res","fetch","method","headers","Content-Type","body","JSON","stringify","data","json","response","handleOptionClick","onSubmit","preventDefault","formData","FormData","append","error","type","value","onChange","placeholder","required","accept","src","alt","disabled","name","trim","userMessage","alert","handleEndSession","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ce7cd0d5.chunk.js","sourcesContent":["// import React, { useState, useRef, useEffect } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n\n// const App = () => {\n//   const [question, setQuestion] = useState('');\n//   const [sessionId, setSessionId] = useState(uuidv4());\n//   const [chatOpen, setChatOpen] = useState(false);\n//   const [messages, setMessages] = useState([]);\n//   const [orderNumber, setOrderNumber] = useState('');\n//   const [issueDescription, setIssueDescription] = useState('');\n//   const [photo, setPhoto] = useState(null);\n//   const [photoPreview, setPhotoPreview] = useState(null);\n//   const [showTicketForm, setShowTicketForm] = useState(false);\n//   const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n//   const chatWindowRef = useRef(null);\n//   const messagesEndRef = useRef(null);\n\n//   useEffect(() => {\n//     console.log(\"Generated sessionId:\", sessionId); // Log sessionId when generated\n//     if (chatOpen && messages.length === 0) {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//         { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//       ]);\n//     }\n//   }, [chatOpen, messages.length, sessionId]);\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [messages]);\n\n//   const handleOptionClick = async (option) => {\n//     console.log(\"Option clicked:\", option, \"with sessionId:\", sessionId); // Log sessionId when option is clicked\n//     setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//     if (option === 'Product Information') {\n//       const res = await fetch('http://localhost:4000/api/product-information', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ sessionId }),\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//     } else if (option === 'Submit a Ticket for Damaged Product') {\n//       setMessages((prevMessages) => [\n//         ...prevMessages,\n//         { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//       ]);\n//       setShowTicketForm(true);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//     }\n//   };\n\n//   const handleTicketSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('orderNumber', orderNumber);\n//     formData.append('issueDescription', issueDescription);\n//     formData.append('sessionId', sessionId);\n//     if (photo) {\n//       formData.append('photo', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-ticket', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setShowTicketForm(false);\n//       setShowAdditionalForm(true);\n//     }\n\n//     setOrderNumber('');\n//     setIssueDescription('');\n//     setPhoto(null);\n//     setPhotoPreview(null);\n//   };\n\n//   const handleAdditionalInfoSubmission = async (e) => {\n//     e.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append('sessionId', sessionId);\n//     formData.append('answer', question);\n//     if (photo) {\n//       formData.append('additionalPhoto', photo);\n//     }\n\n//     const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n//       method: 'POST',\n//       body: formData,\n//     });\n\n//     const data = await res.json();\n//     if (data.error) {\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n//     } else {\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n//       setShowAdditionalForm(true);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     }\n//   };\n\n//   const handlePhotoChange = (e) => {\n//     const file = e.target.files[0];\n//     setPhoto(file);\n//     setPhotoPreview(URL.createObjectURL(file));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (question.trim()) {\n//       console.log(\"Submitting question:\", question, \"with sessionId:\", sessionId); // Log sessionId when submitting question\n//       setMessages((prevMessages) => [...prevMessages, { user: question, bot: '' }]);\n//       const formData = new FormData();\n//       formData.append('question', question);\n//       formData.append('sessionId', sessionId);\n//       if (photo) {\n//         formData.append('additionalPhoto', photo);\n//       }\n\n//       const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       const data = await res.json();\n//       setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       setQuestion('');\n//       setPhoto(null);\n//       setPhotoPreview(null);\n//     } else {\n//       alert('Please enter a question.');\n//     }\n//   };\n\n//   const toggleChat = () => {\n//     console.log(\"Chat toggled. Current state:\", chatOpen); // Log chat toggle state\n//     setChatOpen(!chatOpen);\n//   };\n\n//   const handleEndSession = () => {\n//     console.log(\"Ending session. Previous sessionId:\", sessionId); // Log session end with previous sessionId\n//     setSessionId(uuidv4());\n//     setMessages([]);\n//     setChatOpen(false);\n//     setQuestion(''); // Clear the input box\n//   };\n\n//   const handleClickOutside = (e) => {\n//     if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//       setChatOpen(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     document.addEventListener('mousedown', handleClickOutside);\n//     return () => {\n//       document.removeEventListener('mousedown', handleClickOutside);\n//     };\n//   }, []);\n\n//   const scrollToBottom = () => {\n//     if (messagesEndRef.current) {\n//       messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//         <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">💬</span>\n//       </div>\n//       {chatOpen && (\n//         <div className=\"chat-window\" ref={chatWindowRef}>\n//           <div className=\"chat-header\">\n//             <span>Furniture Store Assistant</span>\n//             <button className=\"close-btn\" onClick={toggleChat}>×</button>\n//           </div>\n//           <div className=\"chat-body\">\n//             {messages.map((msg, index) => (\n//               <div key={index} className=\"chat-message\">\n//                 {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                 {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                 {msg.options && (\n//                   <div className=\"options\">\n//                     {msg.options.map((option, i) => (\n//                       <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                         {option}\n//                       </button>\n//                     ))}\n//                   </div>\n//                 )}\n//                 {msg.photo && <img src={msg.photo} alt=\"Uploaded\" className=\"chat-photo\" />}\n//               </div>\n//             ))}\n//             <div ref={messagesEndRef} />\n//           </div>\n//           {showTicketForm && (\n//             <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={orderNumber}\n//                 onChange={(e) => setOrderNumber(e.target.value)}\n//                 placeholder=\"Order Number\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <textarea\n//                 value={issueDescription}\n//                 onChange={(e) => setIssueDescription(e.target.value)}\n//                 placeholder=\"Issue Description\"\n//                 className=\"chat-input\"\n//                 required\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Submit Ticket</button>\n//             </form>\n//           )}\n//           {showAdditionalForm && (\n//             <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your answer here\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Send</button>\n//             </form>\n//           )}\n//           {!showTicketForm && !showAdditionalForm && (\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <input\n//                 type=\"file\"\n//                 onChange={handlePhotoChange}\n//                 className=\"chat-input\"\n//                 accept=\"image/*\"\n//               />\n//               {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n//               <button type=\"submit\" className=\"chat-submit\">Send</button>\n//             </form>\n//           )}\n//           <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;\n\n\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import './App.css';\n// import { v4 as uuidv4 } from 'uuid';\n\n  \n//   const App = () => {\n//     const [question, setQuestion] = useState('');\n//     const [response, setResponse] = useState('');\n//     const [sessionId, setSessionId] = useState(uuidv4());\n//     const [chatOpen, setChatOpen] = useState(false);\n//     const [messages, setMessages] = useState([]);\n//     const messagesEndRef = useRef(null);\n//     const chatWindowRef = useRef(null);\n  \n//     useEffect(() => {\n//       if (chatOpen && messages.length === 0) {\n//         setMessages([\n//           { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n//           { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n//         ]);\n//       }\n//     }, [chatOpen]);\n  \n//     useEffect(() => {\n//       scrollToBottom();\n//     }, [messages]);\n  \n//     const handleOptionClick = async (option) => {\n//       setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n//       if (option === 'Product Information') {\n//         const res = await fetch('http://localhost:4000/api/product-information', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({ sessionId }),\n//         });\n  \n//         const data = await res.json();\n//         setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       } else if (option === 'Submit a Ticket for Damaged Product') {\n//         setMessages((prevMessages) => [\n//           ...prevMessages,\n//           { user: '', bot: 'Please provide your order number, a description of the issue, and a photo of the damage.' }\n//         ]);\n//       } else {\n//         setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n//       }\n//     };\n  \n//     const handleSubmit = async (e) => {\n//       e.preventDefault();\n  \n//       if (question.trim()) {\n//         const userMessage = { user: question, bot: '' };\n//         setMessages((prevMessages) => [...prevMessages, userMessage]);\n//         setQuestion('');\n  \n//         const res = await fetch('http://localhost:4000/api/product-information-followup', {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify({ question, sessionId }),\n//         });\n  \n//         const data = await res.json();\n//         setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n//       } else {\n//         alert('Please enter a question.');\n//       }\n//     };\n  \n//     const toggleChat = () => {\n//       setChatOpen(!chatOpen);\n//     };\n  \n//     const handleEndSession = () => {\n//       setSessionId(uuidv4());\n//       setMessages([]);\n//       setChatOpen(false);\n//       setQuestion(''); // Clear the input box\n//     };\n  \n//     const handleClickOutside = (e) => {\n//       if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n//         setChatOpen(false);\n//       }\n//     };\n  \n//     useEffect(() => {\n//       document.addEventListener('mousedown', handleClickOutside);\n//       return () => {\n//         document.removeEventListener('mousedown', handleClickOutside);\n//       };\n//     }, []);\n  \n//     const scrollToBottom = () => {\n//       if (messagesEndRef.current) {\n//         messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n//       }\n//     };\n  \n//     return (\n//       <div className=\"App\">\n//         <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n//           <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">💬</span>\n//         </div>\n//         {chatOpen && (\n//           <div className=\"chat-window\" ref={chatWindowRef}>\n//             <div className=\"chat-header\">\n//               <span>Furniture Store Assistant</span>\n//               <button className=\"close-btn\" onClick={toggleChat}>×</button>\n//             </div>\n//             <div className=\"chat-body\">\n//               {messages.map((msg, index) => (\n//                 <div key={index} className=\"chat-message\">\n//                   {msg.user && <div className=\"user-message\">{msg.user}</div>}\n//                   {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n//                   {msg.options && (\n//                     <div className=\"options\">\n//                       {msg.options.map((option, i) => (\n//                         <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n//                           {option}\n//                         </button>\n//                       ))}\n//                     </div>\n//                   )}\n//                 </div>\n//               ))}\n//               <div ref={messagesEndRef} />\n//             </div>\n//             <form onSubmit={handleSubmit} className=\"chat-form\">\n//               <input\n//                 type=\"text\"\n//                 value={question}\n//                 onChange={(e) => setQuestion(e.target.value)}\n//                 placeholder=\"Type your message\"\n//                 className=\"chat-input\"\n//               />\n//               <button type=\"submit\" className=\"chat-submit\">Send</button>\n//             </form>\n//             <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   };\n  \n//   export default App;  \n\n\n\n\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst App = () => {\n  const [question, setQuestion] = useState('');\n  const [sessionId, setSessionId] = useState(uuidv4());\n  const [chatOpen, setChatOpen] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [orderNumber, setOrderNumber] = useState('');\n  const [issueDescription, setIssueDescription] = useState('');\n  const [photo, setPhoto] = useState(null);\n  const [photoPreview, setPhotoPreview] = useState(null);\n  const [showTicketForm, setShowTicketForm] = useState(false);\n  const [showAdditionalForm, setShowAdditionalForm] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const messagesEndRef = useRef(null);\n  const chatWindowRef = useRef(null);\n\n  useEffect(() => {\n    if (chatOpen && messages.length === 0) {\n      setMessages([\n        { user: '', bot: 'Hello, welcome to our furniture store. My name is Eve and I am your customer representative. Please let me know how I can help you?' },\n        { user: '', bot: '', options: ['Product Information', 'Submit a Ticket for Damaged Product', 'Delivery Update', 'Place an Order'] }\n      ]);\n    }\n  }, [chatOpen, messages.length]);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleOptionClick = async (option) => {\n    setMessages((prevMessages) => [...prevMessages, { user: option, bot: '' }]);\n    if (option === 'Product Information') {\n      const res = await fetch('http://localhost:4000/api/product-information', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n    } else if (option === 'Submit a Ticket for Damaged Product') {\n      const res = await fetch('http://localhost:4000/api/initial-ticket-request', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ sessionId }),\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n      setShowTicketForm(true);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: `Option \"${option}\" selected. Feature to be implemented.` }]);\n    }\n  };\n\n  const handleTicketSubmission = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append('orderNumber', orderNumber);\n    formData.append('issueDescription', issueDescription);\n    formData.append('sessionId', sessionId);\n    if (photo) {\n      formData.append('photo', photo);\n    }\n\n    const res = await fetch('http://localhost:4000/api/submit-ticket', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const data = await res.json();\n    if (data.error) {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n      setShowTicketForm(false);\n      setShowAdditionalForm(true);\n    }\n\n    setOrderNumber('');\n    setIssueDescription('');\n    setPhoto(null);\n    setPhotoPreview(null);\n    setIsSubmitting(false);\n  };\n\n  const handleAdditionalInfoSubmission = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    const formData = new FormData();\n    formData.append('sessionId', sessionId);\n    formData.append('answer', question);\n    if (photo) {\n      formData.append('additionalPhoto', photo);\n    }\n\n    const res = await fetch('http://localhost:4000/api/submit-additional-info', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const data = await res.json();\n    if (data.error) {\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.error }]);\n    } else {\n      setMessages((prevMessages) => [...prevMessages, { user: question, bot: data.response }]);\n      setShowAdditionalForm(true);\n      setQuestion('');\n      setPhoto(null);\n      setPhotoPreview(null);\n    }\n    setIsSubmitting(false);\n  };\n\n  const handlePhotoChange = (e) => {\n    const file = e.target.files[0];\n    setPhoto(file);\n    setPhotoPreview(URL.createObjectURL(file));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    if (question.trim()) {\n      const userMessage = { user: question, bot: '' };\n      setMessages((prevMessages) => [...prevMessages, userMessage]);\n      setQuestion('');\n\n      const res = await fetch('http://localhost:4000/api/product-information-followup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ question, sessionId }), // Ensure sessionId is passed\n      });\n\n      const data = await res.json();\n      setMessages((prevMessages) => [...prevMessages, { user: '', bot: data.response }]);\n    } else {\n      alert('Please enter a question.');\n    }\n    setIsSubmitting(false);\n  };\n\n  const toggleChat = () => {\n    setChatOpen(!chatOpen);\n  };\n\n  const handleEndSession = () => {\n    setSessionId(uuidv4());\n    setMessages([]);\n    setChatOpen(false);\n    setQuestion(''); // Clear the input box\n  };\n\n  const handleClickOutside = (e) => {\n    if (chatWindowRef.current && !chatWindowRef.current.contains(e.target)) {\n      setChatOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={`chat-bubble ${chatOpen ? 'open' : ''}`} onClick={toggleChat}>\n        <span role=\"img\" aria-label=\"chat icon\" className=\"bubble-icon\">💬</span>\n      </div>\n      {chatOpen && (\n        <div className=\"chat-window\" ref={chatWindowRef}>\n          <div className=\"chat-header\">\n            <span>Furniture Store Assistant</span>\n            <button className=\"close-btn\" onClick={toggleChat}>×</button>\n          </div>\n          <div className=\"chat-body\">\n            {messages.map((msg, index) => (\n              <div key={index} className=\"chat-message\">\n                {msg.user && <div className=\"user-message\">{msg.user}</div>}\n                {msg.bot && <div className=\"bot-response\">{msg.bot}</div>}\n                {msg.options && (\n                  <div className=\"options\">\n                    {msg.options.map((option, i) => (\n                      <button key={i} onClick={() => handleOptionClick(option)} className=\"option-button\">\n                        {option}\n                      </button>\n                    ))}\n                  </div>\n                )}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n          {showTicketForm && (\n            <form onSubmit={handleTicketSubmission} className=\"chat-form\">\n              <input\n                type=\"text\"\n                value={orderNumber}\n                onChange={(e) => setOrderNumber(e.target.value)}\n                placeholder=\"Order Number\"\n                className=\"chat-input\"\n                required\n              />\n              <textarea\n                value={issueDescription}\n                onChange={(e) => setIssueDescription(e.target.value)}\n                placeholder=\"Issue Description\"\n                className=\"chat-input\"\n                required\n              />\n              <input\n                type=\"file\"\n                onChange={handlePhotoChange}\n                className=\"chat-input\"\n                accept=\"image/*\"\n              />\n              {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n              <button type=\"submit\" className=\"chat-submit\" disabled={isSubmitting}>Submit Ticket</button>\n            </form>\n          )}\n          {showAdditionalForm && (\n            <form onSubmit={handleAdditionalInfoSubmission} className=\"chat-form\">\n              <input\n                type=\"text\"\n                value={question}\n                onChange={(e) => setQuestion(e.target.value)}\n                placeholder=\"Type your answer here\"\n                className=\"chat-input\"\n              />\n              <input\n                type=\"file\"\n                name=\"additionalPhoto\"\n                onChange={handlePhotoChange}\n                className=\"chat-input\"\n                accept=\"image/*\"\n              />\n              {photoPreview && <img src={photoPreview} alt=\"Preview\" className=\"photo-preview\" />}\n              <button type=\"submit\" className=\"chat-submit\" disabled={isSubmitting}>Send</button>\n            </form>\n          )}\n          {!showTicketForm && !showAdditionalForm && (\n            <form onSubmit={handleSubmit} className=\"chat-form\">\n              <input\n                type=\"text\"\n                value={question}\n                onChange={(e) => setQuestion(e.target.value)}\n                placeholder=\"Type your message\"\n                className=\"chat-input\"\n              />\n              <button type=\"submit\" className=\"chat-submit\" disabled={isSubmitting}>Send</button>\n            </form>\n          )}\n          <button onClick={handleEndSession} className=\"end-session-btn\">Close Session</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}